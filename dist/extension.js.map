{"version":3,"sources":[".././src/extension.js","../external \"fs\"","../external \"path\"","../external \"readline\"","../external \"stream\"","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":["vscode","fs","readline","stream","path","module","exports","activate","context","console","log","disposable","commands","registerCommand","editor","window","activeTextEditor","config","workspace","getConfiguration","options","pmin","get","pmax","plimit","pwrap","document","instream","createReadStream","resolve","__dirname","outstream","rl","createInterface","paragraphs","Object","on","line","noOfSentences","split","length","undefined","Array","push","resultArray","no","minLength","maxLength","output","i","randomLength","min","max","Math","floor","random","randomEntry","forEach","index","array","replace","getParagraphs","edit","editBuilder","insert","selection","active","subscriptions","deactivate","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"2BAEA,MAAMA,EAAS,EAAQ,KACjBC,EAAK,EAAQ,KACbC,EAAW,EAAQ,IACnBC,EAAS,EAAQ,KACjBC,EAAO,EAAQ,KA4ErBC,EAAOC,QAAU,CAChBC,SArED,SAAkBC,GAEjBC,QAAQC,IAAI,0CAEZ,IAAIC,EAAaX,EAAOY,SAASC,gBAAgB,qBAAqB,WACrE,MAAMC,EAASd,EAAOe,OAAOC,iBACvBC,EAASjB,EAAOkB,UAAUC,iBAAiB,UAC3CC,EAAU,CACfC,KAAMJ,EAAOK,IAAI,sBACjBC,KAAMN,EAAOK,IAAI,sBACjBE,OAAQP,EAAOK,IAAI,sBACnBG,MAAOR,EAAOK,IAAI,UAGnB,GAAIR,EAAQ,CACMA,EAAOY,SAAxB,MACMC,EAAW1B,EAAG2B,iBAAiBxB,EAAKyB,QAAQC,UAAW,gBACvDC,EAAY,IAAI5B,EAChB6B,EAAK9B,EAAS+B,gBAAgBN,EAAUI,GAE9C,IAAIG,EAAa,IAAIC,OAErBH,EAAGI,GAAG,QAAQ,SAAUC,GACvB,IAAIC,EAAgBD,EAAKE,MAAM,UAC/BD,EAAgBA,EAAcE,OAAS,EACNC,MAA7BP,EAAWI,KAGdJ,EAAWI,GAAiB,IAAII,OAFhCR,EAAWI,GAAeK,KAAKN,MAOjCL,EAAGI,GAAG,SAAS,WACd,MAAMQ,EAQP,SAAuBC,EAAIC,EAAWC,GACrC,IAAIC,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAII,IAAK,CAC5B,MAAMC,GAWcC,EAXcL,EAWTM,EAXoBL,EAYvCM,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GAX9CK,EAAcH,KAAKC,MAAMD,KAAKE,SAAWrB,EAAWgB,GAAcV,QACxEQ,EAAOL,KAAKT,EAAWgB,GAAcM,IASvC,IAAsBL,EAAKC,EAH1B,OAJIhC,EAAQK,OACXuB,EAAOS,SAAQ,CAACpB,EAAMqB,EAAOC,KAC5BA,EAAMD,GAASrB,EAAKuB,QAAQ,QAAS,gBAEhCZ,EAnBaa,CAAczC,EAAQI,OAAQJ,EAAQC,KAAMD,EAAQG,MACxET,EAAOgD,MAAKC,IACXnB,EAAYa,SAAQpB,IACnB0B,EAAYC,OAAOlD,EAAOmD,UAAUC,OAAQ7B,EAAO,qBAyBxD7B,EAAQ2D,cAAcxB,KAAKhC,IAQ3ByD,WAJD,e,qBChFA/D,EAAOC,QAAU+D,QAAQ,O,qBCAzBhE,EAAOC,QAAU+D,QAAQ,S,oBCAzBhE,EAAOC,QAAU+D,QAAQ,a,qBCAzBhE,EAAOC,QAAU+D,QAAQ,W,qBCAzBhE,EAAOC,QAAU+D,QAAQ,YCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,GAAGH,EAAyBG,GAC3B,OAAOH,EAAyBG,GAAUnE,QAG3C,IAAID,EAASiE,EAAyBG,GAAY,CAGjDnE,QAAS,IAOV,OAHAoE,EAAoBD,GAAUpE,EAAQA,EAAOC,QAASkE,GAG/CnE,EAAOC,QCjBWkE,CAAoB,K","file":"extension.js","sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst readline = require('readline');\nconst stream = require('stream');\nconst path = require('path')\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n\n\tconsole.log('Your extension \"jLorem\" is now active!');\n\n\tlet disposable = vscode.commands.registerCommand('jlorem.fetchLorem', function () {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tconst config = vscode.workspace.getConfiguration('jLorem');\n\t\tconst options = {\n\t\t\tpmin: config.get('sentenceLength.min'),\n\t\t\tpmax: config.get('sentenceLength.max'),\n\t\t\tplimit: config.get('numberOfParagraphs'),\n\t\t\tpwrap: config.get('pWrap')\n\t\t}\n\n\t\tif (editor) {\n\t\t\tconst document = editor.document;\n\t\t\tconst instream = fs.createReadStream(path.resolve(__dirname, \"iamacat.txt\"))\n\t\t\tconst outstream = new stream\n\t\t\tconst rl = readline.createInterface(instream, outstream)\n\n\t\t\tlet paragraphs = new Object()\n\n\t\t\trl.on('line', function (line) {\n\t\t\t\tlet noOfSentences = line.split(/[！？。]+/)\n\t\t\t\tnoOfSentences = noOfSentences.length - 1\n\t\t\t\tif (paragraphs[noOfSentences] != undefined) {\n\t\t\t\t\tparagraphs[noOfSentences].push(line)\n\t\t\t\t} else {\n\t\t\t\t\tparagraphs[noOfSentences] = new Array()\n\t\t\t\t\tparagraphs[noOfSentences].push(line)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\trl.on('close', function () {\n\t\t\t\tconst resultArray = getParagraphs(options.plimit, options.pmin, options.pmax)\n\t\t\t\teditor.edit(editBuilder => {\n\t\t\t\t\tresultArray.forEach(line => {\n\t\t\t\t\t\teditBuilder.insert(editor.selection.active, line + '\\r\\n');\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tfunction getParagraphs(no, minLength, maxLength) {\n\t\t\t\tlet output = [];\n\t\t\t\tfor (let i = 0; i < no; i++) {\n\t\t\t\t\tconst randomLength = getRandomInt(minLength, maxLength)\n\t\t\t\t\tconst randomEntry = Math.floor(Math.random() * paragraphs[randomLength].length)\n\t\t\t\t\toutput.push(paragraphs[randomLength][randomEntry])\n\t\t\t\t}\n\t\t\t\tif (options.pwrap)\n\t\t\t\t\toutput.forEach((line, index, array) => {\n\t\t\t\t\t\tarray[index] = line.replace(/(.*)/i, \"<p>$1</p>\")\n\t\t\t\t\t})\n\t\t\t\treturn output\n\t\t\t}\n\n\t\t\tfunction getRandomInt(min, max) {\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1)) + min\n\t\t\t}\n\t\t}\n\t})\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nfunction deactivate() {}\n\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}","module.exports = require(\"fs\");;","module.exports = require(\"path\");;","module.exports = require(\"readline\");;","module.exports = require(\"stream\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(474);\n"],"sourceRoot":""}